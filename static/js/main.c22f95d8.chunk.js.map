{"version":3,"sources":["components/ContextWrapper/WithContext.js","components/ListData/ListData.js","components/Continents/Continents.js","components/App.js","serviceWorker.js","index.js"],"names":["GET_CONTINENTS_QUERY","gql","ListContext","React","createContext","WithContext","props","useQuery","data","loading","error","useState","first","second","display","setDisplay","Provider","value","children","render","element","prevCode","map","el","onClick","e","length","changeDisplay","name","key","className","Continents","useContext","dataToRender","setDataToRender","useEffect","Object","keys","toString","next","item","find","arr","Array","array","child","findDeepChilds","code","ListData","prev","App","Boolean","window","location","hostname","match","cache","InMemoryCache","link","HttpLink","uri","client","ApolloClient","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c22f95d8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nconst GET_CONTINENTS_QUERY = gql`\n    {\n        continents {\n            code\n            name\n            countries {\n                code\n                name\n                languages {\n                    code\n                    name\n                }\n            }\n        }\n    }\n`;\n\nexport const ListContext = React.createContext(null);\n\nconst WithContext = (props) => {\n    const { data, loading, error } = useQuery(GET_CONTINENTS_QUERY);\n    const [display, setDisplay] = useState({\n        first: null,\n        second: null,\n    });\n    return (\n        <ListContext.Provider\n            value={{ data, loading, error, display, setDisplay }}>\n            {props.children}\n        </ListContext.Provider>\n    );\n};\n\nexport default WithContext;\n","import React from \"react\";\n\nexport default (props) => {\n    const render = (element, prevCode) => {\n        return element.map((el) => {\n            return (\n                <ul>\n                    <li\n                        onClick={(e) => {\n                            !prevCode &&\n                                el.children.length &&\n                                props.changeDisplay(el.name);\n                            prevCode &&\n                                el?.children?.length &&\n                                !props.display.second &&\n                                props.changeDisplay(prevCode, el.name);\n                            prevCode &&\n                                el?.children?.length &&\n                                props.display.second &&\n                                props.changeDisplay(prevCode, el.name);\n                        }}\n                        key={el.name + \"_li\"}\n                        name={el.name}\n                        className='li-block'>\n                        {el.name}\n                    </li>\n                    {el.children && props.display.first === el.name && (\n                        <ul key={el.name + \"_ul\"}>\n                            {render(el.children, el.name)}\n                        </ul>\n                    )}\n                    {el.children &&\n                        prevCode &&\n                        props.display.second === el.name && (\n                            <ul key={el.name + \"_ul\"}>\n                                {render(el.children, el.name)}\n                            </ul>\n                        )}\n                </ul>\n            );\n        });\n    };\n    return render(props.data);\n};\n","import React, { useState, useEffect, useContext } from \"react\";\n\nimport ListData from \"../ListData/ListData\";\n\nimport { ListContext } from \"../ContextWrapper/WithContext\";\n\nconst Continents = (props) => {\n    const { data, loading, error, setDisplay, display } = useContext(\n        ListContext,\n    );\n    const [dataToRender, setDataToRender] = useState(null);\n\n    const changeDisplay = (prev, next) => {\n        setDisplay({\n            first:\n                display.first === prev && !next\n                    ? display.first === prev && display.second === next\n                        ? prev\n                        : null\n                    : prev,\n            second: display.second === next ? null : next,\n        });\n    };\n\n    useEffect(() => {\n        if (data) {\n            const key = Object.keys(data).toString();\n            const next = (item) =>\n                Object.keys(item).find((arr) => item[arr] instanceof Array);\n            const findDeepChilds = (arr) => {\n                return arr.map((element) => {\n                    const array = next(element);\n                    return {\n                        name: element.name,\n                        code: element.code,\n                        children: array ? findDeepChilds(element[array]) : null,\n                    };\n                });\n            };\n            const array = data[key].map((item) => {\n                const findedArray = next(item);\n                const child = findDeepChilds(item[findedArray]);\n                return {\n                    name: item.name,\n                    code: item.code,\n                    children: child,\n                };\n            });\n            setDataToRender(array);\n        }\n    }, [data, display, setDisplay]);\n    return (\n        <>\n            {loading && <h1>Loading...</h1>}\n            {error && <h1>{error}</h1>}\n            {dataToRender && (\n                <ul className='right-align continent'>\n                    <ListData\n                        data={dataToRender}\n                        display={display}\n                        changeDisplay={changeDisplay}\n                    />\n                </ul>\n            )}\n        </>\n    );\n};\n\nexport default Continents;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport WithContext from \"./ContextWrapper/WithContext\";\n\nimport Continents from \"./Continents/Continents\";\n\nconst App = () => {\n    return (\n        <>\n            <div className='App'>\n                <div className='continents-list'>\n                    <WithContext>\n                        <Continents />\n                    </WithContext>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n    uri: \"https://countries.trevorblades.com/\",\n});\n\nconst client = new ApolloClient({\n    cache,\n    link,\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}